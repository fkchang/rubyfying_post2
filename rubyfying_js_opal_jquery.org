#+OPTIONS: num:nil

#+ATTR_HTML: :target "_blank"
In my last post about [[http://funkworks.blogspot.com/2015/06/accessing-javascript-from-opal.html][accessing JavaScript from Opal]], I asserted that
it is preferable to wrap JavaScript libraries in *Opal*; the reasons
why are best shown by example.

#+ATTR_HTML: :target "_blank"
Let's look at [[https://github.com/opal/opal-jquery][Opal-jquery]], one of the "official Opal libraries", as a
source of good concrete examples. *Opal-jquery* wraps *jQuery*
with an idiomatic *Ruby* frontend.  There are some differences from the
original JavaScript API, but my opinion it that these changes are for
the better.

* Basic jQuery

I call the =jQuery/$= function "jQuery's universal entry point."  Nearly
all uses of *jQuery* start from this function.  One of the primary uses
of =$= is as a selector for elements.  It is very typical to chain one
or more actions directly from the selector, as shown here:

#+BEGIN_SRC javascript
  $('a').action()                                 // select by node type
  $('#element-id').action().action2()             // select by id
  $('.cssSelector').action().action2().action3()  // select by class
#+END_SRC

Interestingly, this same "universal entry point" function is also how
one sets up "Document ready" actions.  All of the various invocations
below /can/ be used to setup "Document ready" actions.

#+BEGIN_SRC javascript
  $(document).ready(function() {alert('document is ready')});
  $('p').ready(function(){alert('fires whether or not there is p element')});
  $('never-matching_selector').ready(function(){alert('still fires')});
  $().ready(function() { alert('this works, but the doc says "not recommended"')});
  $(function(){ alert('function called directly');});
#+END_SRC

* Ruby-fying Javascript - Object oriented basic jQuery

Rather than having a function that is the universal entry point,
=opal-jquery= assigns selector entry points to appropriate constants
(classes/objects).  At the top level, we call these selectors from the
constants themselves.

** Selectors
#+BEGIN_SRC ruby
  Element.find('#mydiv')          # top level find
  Document.find('#mydiv')         # Document is a special instance of Element
  Element.id('mydiv')             # find by id
#+END_SRC

I like that =find()= is a consistent selector. It can find from the
top, and relative to an =Element= instance.

#+BEGIN_SRC ruby
  mydiv = Element.find '#mydiv'
  h1_children_of_mydiv = mdiv.find 'h1'
#+END_SRC

=Opal-jquery= also implements a Ruby convention where the =Element.[]=
method is used as a selector. This comes in handy for those who miss
the terseness of *$*.

#+BEGIN_SRC ruby
  mydiv = Element['#mydiv']
  ols = Element['ol']
  help_sections = Element['.help']
#+END_SRC

Opal-jquery moves jQuery functionality from a "universal entry point"
function, to appropriate constants, classes and modules. Here's a
brief summary of these constants:

- =Element= - bridged class to the *jQuery* object.
- =Document= - object as constance, instance of =Element=, extended with selected document specific methods.
- =Event= - class encapsulating events.
- =HTTP= - class wrapping *jQuery* ajax functionality.
- =LocalStorage= - not part of *jQuery*, local storage wrapper for convenience.
- =Kernel= - extended with =alert()= so it's accessible everywhere, like it is in JavaScript.

** Document Ready

In *Opal-jQuery* "Document ready" actions are setup with =Document.ready?()= method:

#+BEGIN_SRC ruby
  Document.ready? do
    alert "Welcome to opal-jquery!"
  end
#+END_SRC

=Document.ready?()= employs 2 Ruby idioms:

    1. The method name ends in a '?', which reads well to my eyes.
    2. It takes a block, which also reads well.  *Opal-jquery* departs from *jQuery*'s
       single universal function for all of the ways to setup "Document ready" actions.


A number of the "Document ready" Javascript examples I showed above
work, but don't make logical sense - i.e. calling =ready()= off of the
results of a selector where the element is not =document=.  In
*Opal-jQuery* you can only set "Document ready" actions with
=Document.ready= .  I feel this expresses the intent clearly and makes
for less of a violation of the Principle of Least Surprise, but not
even having the option to construct semantically odd lines.  The
following below will *not* work because there is no =Element#ready?()=

#+BEGIN_SRC ruby
  Element.find('a').ready? { action }     # equivalent to $('a').ready(function(){action});
#+END_SRC

* Blocks

As is typical with Ruby, in *Opal-jquery* we make use of blocks where
anonymous functions are typically used in *jQuery*, or JavaScript in
general.  The examples read well.

#+BEGIN_SRC ruby
  element = Element.find '#my_element'
  element.on(:click) { alert("I've been clicked") }                          # no event
  element.on(:click) { |event| alert("#{evt.current_target} been clicked") } # event
#+END_SRC

Note that you can pass lambdas, methods, etc. in place of a
block, similar to how one would use a named function or function stored in a
variable in JavaScript.

#+BEGIN_SRC ruby
  element = Element.find '#my_element'
  my_lambda = lambda { alert "separate lambda" }
  element.on(:click) &my_lambda

  def some_method
    alert :some_method
  end
  element.on(:click) &some_method

  instance_method = obj.method(:an_instance_method)
  element.on(:click) &instance_method
#+END_SRC

* Consistency with Native

#+ATTR_HTML: :target "_blank"
In [[http://funkworks.blogspot.com/2015/06/accessing-javascript-from-opal.html][accessing JavaScript from Opal]], I showed how attributes of =Native=
are accessed by the =[]= and =[]== methods.  =Element= instances adhere to
this convention. - Consistency is good and helps support the
*Principle of Least Surprise*.

#+BEGIN_SRC ruby
  native = Native(`returnsJsObject`)
  value = native[:attr_name]
  native[:attr_name] = new_value

  elt = Element.find('#anId')
  value = elt[:attr_name]
  elt[:attr_name] = new_value

#+END_SRC

* Conclusion

For the Rubyist reader, there are advantages in wrapping *jQuery* in
*Opal-JQuery*: the code reads well, expresses intent clearly, and uses
conventions and idioms that a Rubyist should already be familiar with.
Hopefully this brief overview gives you ideas on how one could wrap
other JavaScript libraries w/idiomatic Ruby for similar benefits.  In
future articles we will look at more examples of Ruby-fication of
jQuery's API, as well as show you some techniques used to wrap jQuery
so that you might be able to apply them to wrapping other JavaScript
libraries.

Thanks to [[http://blog.scottnelsonsmith.com][Scott Smith]] for proofreading this and a number of the previous Opal blog posts.
