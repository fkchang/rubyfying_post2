#+OPTIONS: num:nil toc:nil

#+ATTR_HTML: :target "_blank"

* Situation

#+ATTR_HTML: :target "_blank"
I was reviewing a pull request from a non-colocated team mate.  In
discussing the pull request, I realized one of the assertions on his
spec (we use [[http://rspec.info][rspec]]) didn't work exactly the way he expected.  To aid
in the discussion, I sent him some code via chat. Shortly thereafter,
I realized I could do better than just pasting in some code.

"Do better?" you ask.  What do I mean? In general, what's the problem
with sending a teammate a spec via chat, email, whatever?

When the teammate receives the code, he may want to run it in order to
understand it.  In this case, being a spec file, he will need to paste
the code into a running test system to explore how it works.

That can be a bit of a hassle, especially when using Rails where specs
often do not run that fast.  It's not that running them is impossible,
but it may be sufficiently inconvenient that one wouldn't just
immediately do it.

Here's the epiphany:

What if I could send someone specs that:
- ran nearly instantenously
- didn't require any setup

The remainder of this article shows you how.

* Solution
#+ATTR_HTML: :target "_blank"
Aside from the =jsbin=-like workspace, [[http://fkchang.github.io/opal-playground][opal-playground]] has a [[http://fkchang.github.io/opal-playground/rspec/][rspec
page]] configured to run spec tests by writing or pasting them in and
executing. Now instead of sending my co-workers snippets of code, I
test the spec in the Opal playground and test it.  When I'm satisfied
that it's doing what I want, I send the link directly to him.  Here's
what I originally pasted to him:
#+ATTR_HTML: :target "_blank"
(I've embedded the actual rspec page in an iframe [[http://git.io/vmalc][direct link]] if below
iframe doesn't look right in your browser).  You can vertically scroll
the text pane to see the remaining *rspec* content.

#+BEGIN_HTML
<iframe width="100%" height="500" src="http://git.io/vmalc" frameborder="0" allowfullscreen></iframe>
#+END_HTML

Note that both tests pass.  You can change the code and press the blue
*Run Code* button (it will be under the "hamburger menu" in the upper
right corner if the browser width is narrow enough) to run it again. Notice
that the 2nd test's "it" statement says it should fail, but it passes.

* How Technology Helped Solve the Original Problem

The code in these rspec pages is not the code in the pull request, but rather
simplified code that exercises expectations in the same or similar
fashion to the code in the original pull request. The problem in the original
pull request contained an rspec stating that a method (in this sample's
case =#name=) must be invoked.

#+BEGIN_SRC ruby
  it "should initialize with the given name" do
    allow_any_instance_of(User).to receive(:name)
    u = User.new
  end
#+END_SRC

As you can see above, the =#name= method is never invoked and yet the
spec still passes.  So I changed the "it" comment to point this out
and sent it back to the teammate:

#+BEGIN_SRC ruby
  it "should fail" do
    allow_any_instance_of(   User).to receive(:name)
    u = User.new
  end
#+END_SRC

Before my teammate had the time to digest the implications, he
countered with a suggestion code suggestion.

#+BEGIN_QUOTE
try allow_any_instance_of(Kass).to receive(:stuff).with(params)
#+END_QUOTE

To which I replied

#+BEGIN_QUOTE
Why should adding =with= make it pass?
#+END_QUOTE

Following my lead, he countered with his own spec to demonstrate

#+ATTR_HTML: :target "_blank"
([[http://git.io/vma45][direct link]] if below iframe doesn't look right)
#+BEGIN_HTML
<iframe width="100%" height="500" src="http://git.io/vma45" frameborder="0" allowfullscreen></iframe>
#+END_HTML

What his spec showed was that is if he added a parameter expecation,
and the method expected to be called was called, but not with that
parameter, the spec will fail

#+BEGIN_SRC ruby
  it "should fail" do
    allow_any_instance_of(User).to receive(:name).with('hello')
    u = User.new
    u.name
  end
#+END_SRC

Soon thereafter, he reasoned about he realized I was right.

#+BEGIN_QUOTE
Oh... but I see that you're saying what if it's not called at all?
#+END_QUOTE

To confirm his understanding, I sent a spec which uses his expectation,
should fail if his understanding was correct, but passed:

#+ATTR_HTML: :target "_blank"
([[http://git.io/vqMDa][direct link]] if below iframe doesn't look right)

#+BEGIN_HTML
<iframe width="100%" height="550" src="http://git.io/vqMDa" frameborder="0" allowfullscreen></iframe>
#+END_HTML

Above is the spec in question that proved my point, which was the mistake in his PR.

#+BEGIN_SRC ruby
  it "will pass if not called at all" do
    allow_any_instance_of(User).to receive(:name).with('hello')
    u = User.new
  end
#+END_SRC

With that knowledge gained, my teammate was able to construct his spec
in a way that tested what it was supposed to.

* Summary
In doing code discussion, some tool support can be handy.  Sometimes
even the exact code is not enough - while it's not ambiguous to the
interpreter or compiler, it's not always clear to the programmer.  A key
goal of Agile is to improve communication.  In this case, discussing
*rspec* specs using the rspec "worksheet" page helped a bunch.

It was:
- Quick: write some, easily run without any setup
- Collaborative: you can send them back and forth
- Facillitated communication: my teammate quickly responded in kind
- Retainable as a url: he can always go back and review the example
  via the url vs. digging through a large spec file to find it. While
  collocation is best for communication, "executable rspec gists" can
  help to mitigate the "distance" barrier when the teammate is remote.
- While facilitated by opal, the code itself doesn't have to be client-side opal;
  the code discussed above was, indeed, backend code.

Other uses:

- Send exercises while mentoring
- Perform a code interview without needing setup.

* Teaser

I plan on making some more blog posts on how opal based tools can help with
collaboration
