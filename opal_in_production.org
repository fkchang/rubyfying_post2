One thing I believe thats hinders [[http://opalrb.org][Opal's]] adoption is that people are
unsure whether Opal is "ready for production." On May 8, 2015, we
deployed an Opal (and Rails) app to production.  While I've done a
fair amount of work with Opal in the last few years,
it was only on May 8th that I joined the ranks of those having
deployed a production site using Opal.

This project was quite successful across the board. While I largely
attribute the success to our (Agile) process, the technical decision
to use Opal played a significant role in that success.  I hope the
remainder of this article can persuade people on the fence about adopting
Opal to try it.


Some Key Points:

- Lots of tests! This is our first app (out of 8 apps in 6 years) with
  extensive front-end tests.  These are written in RSpec since RSpec
  has been our testing language on the back-end.
  - Our other apps don't have much Javascript functionality in the front end.
    As a result, vanilla
    Rails has generally served the client-side requirement of these apps quite well.
    Historically, we have tried repeatedly to supply comprehensive Javascript
    tests, going all the way back with [[http://thinkrelevance.com/blog/2009/05/12/blue-ridge-1-0-javascript-unit-testing-for-rails-scandalous][blueridge]] and subsequent
    newer approaches such as [[http://jasmine.github.io][Jasmine]], etc.  It seems we always experienced
    mixed success both implementing and maintaining the tests,
    but since these apps didn't have much front-end functionality,
    we could "live with it".
  - All of that changed with the app we've just deployed.
    This app has complex business rules
    that have to run on both the
    server and client.  There is considerably more user
    interaction, and so testing was far more more critical to this
    app's timely success.
  - It's not that you can't write comprehensive unit tests in
    Javascript --- many teams have succeeded where we failed. However,
    Opal makes client-side testing much easier for Rubyists by
    allowing the use of the same language, knowledge and test
    framework on both ends.  I personally have a much better TDD/BDD
    focus in when coding in Ruby than Javascript.
  - Many frameworks copy or are inspired by [[http://rspec.info][RSpec]].  Having Opal lets
    the Rubyist use the original instead of a Javascript derivative.
    For Rubyists that don't like RSpec (like DHH), [[https://github.com/skofo/opal-minitest][minitest]] is also available.
  - Finally, given that browser based coding is often asynchronous,
    the [[https://github.com/opal/opal-rspec#async-examples][async examples]] as implemented in [[https://github.com/opal/opal-rspec][opal-rspec]] provide handy
    and standard ways to test those.

- "Isomorphic" - Running the same code on the front-end as the back-end is good.
  - It's as big a deal as the guys Javascript running isomorphic
    Javascript say it is, except that Opal lets you use Ruby, the
    better (bias noted!)  programming language.  Some benefits are:
    - Reuse code on front/back end.
    - Avoids having to switch your mental context between Ruby and Javascript.
    - Ruby language/library perks ( a short list )
      - Classes and inheritance were very beneficial in our "complex
        business rules" code.  There IS a reason that these features
        have been re-implemented many times in Javascript libraries
        and frameworks, much less appearing in ES6
      - Powerful built-in classes and stdlib - i.e. underscore exists
        largely to bring Javascript arrays and hashes to par w/Ruby's
        etc.
    - Use same tools: favorite editor/IDE, guard, rspec etc.
      - We use [[https://github.com/fkchang/opal-irb][opal-irb]] which (sort of) mimicks using the Rails console,
        including accessing live Ruby objects during run-time.
  - The ability to reuse server-side complex business logic code on
    the front end was a driving factor on our team choosing Opal.
    Despite my being an Opal advocate, the team suggested Opal on
    their own without any prompting on my part. I did spike
    what I thought was the most involved scenario as a proof of
    concept; the team liked the way the code looked and went with it.
    - OH: "That would've been really hard if we did it in Javascript"
      -- the team member who started the local Meteor.js meetup (as
      background for someone who isn't a Javascript newbie).
- Challenges - conventions still need to be worked out.  All the production Opal
  apps I know of are closed source, so there's not a lot of code to
  look at, nor much written about it.
  - Where should the code live?  Rails already provides standard
    locations for front end and backend code, but where do you put
    shared code? We took a "meteor-esque" way: provide a dedicated
    directory where isomorphic code lives (expect future blog post
    that will discuss details).
  - Explicit require vs auto load?  With the Rails autoloader, one may
    rarely see a require statement in a Rails app.  Since Opal uses
    sprockets to load assets, one CAN setup a situation where you
    wouldn't need to require things.  We did encounter load problems,
    which in part are due to loading in browser specs, that were
    troublesome.  Instead we fell back [fn:1] to using explicit
    requires in our Opal code, which solved that problem, and also
    fits in with the "be explicit less magic" [fn:2] themes that are more prevalent these
    days.
- TL;DR: Ruby is Joy.  If you love Ruby on the back end, chances are high you'll
  love it on the front end.
  - The code is cleaner, clearer and more maintainable than if we had done it in Javascript.
    - A cleaner more expressive language contributes strongly to this.
  - Shared code on front and back ends - no more re-implementations.
  - Front end programming is nearly the same as back end. Use the same
    tools, conventions, techniques etc.


Hopefully, this helps answer some questions for would-be Opal
adopters.  We're happy with the improved productivity and coding enjoyment
that Opal has brought us.

* Footnotes

[fn:1] In this effort, we were unable to duplicate the generally
seemless behavior that the Rails autoloader does so well on the back
end on the frontend.  Opal uses sprockets to manage dependencies and
we had some issues with loading order and using sprockets directives
in the standard application.js manifest.  We ultimately took a path of
having an opal_requires.js.rb that served as a an "Opal requires
manifest" that solved our issues.  It is complicated situation that
ought to improve over time, both within Opal and related libraries
(Opal 0.8.0 for example has an improved and upgraded sprockets
implementation), and best practices

[fn:2] In my spike, I favored explicit requires where the shared
client/server code direction was not included in the load path to make
it explicit where the code lived, i.e.

#+BEGIN_SRC ruby
require 'frontend_only_code'
require 'client_and_server/code_shared_front_and_backend'
#+END_SRC
