#+OPTIONS: num:nil toc:nil

So if you've decided to take the plunge and try *Opal*, the 1st question
you might have is, "Do I lose access to all the *JavaScript* libraries
out there?" The answer is no.  Ideally you'll want *Ruby* wrappers that
"ruby-fy" the  JavaScript in question.  It'll make you happier but that's not
always available.  A great example of a Ruby-fied wrapper is
[[https://github.com/opal/opal-jquery][opal-jquery]]; this shows how the jQuery interface can be made more Ruby like.

* Calling JavaScript Directly
To invoke JavaScript and store the return value in Opal, use *x-strings*,
either via the *backtick* operator or the *%x syntax*.  Some documentation
here: http://opalrb.org/docs/compiled_ruby/#javascript-from-ruby

#+BEGIN_SRC ruby
# backticks, good for 1 line
location = `window.location`

# %x for multi line, I often use | as delimeter, esp. for JavaScript
%x|
  var f = new Foo();
  f.bar
|
#+END_SRC
* Interpolation

*Opal* uses *x-strings* to support /interpolation/ just as *Ruby* does:

#+BEGIN_SRC ruby
 # it should be noted that prompt is already exposed in opal-browser
 `prompt('what have you done since  ' + #{RUBY_RELEASE_DATE})`
#+END_SRC

* Simple return values
So you can now invoke any JavaScript you want, but what about the
return values?  X-strings return the native types, some of which you
can use and manipulate directly in Opal.

In Opal, 3 "Ruby" types get compiled to the native Javascript types but are still
treated as Ruby objects by Opal.  These types are
- Strings (with the exception that these are treated as immutable)
- Numeric
- Array

See http://opalrb.org/docs/compiled_ruby/ for more
details on what Opal compiles to.

#+BEGIN_SRC ruby
# numbers
n = `2 + 2`
triple product = n * 3 # => 12

# strings
str = 'abcdef'
str[3..-1]             # => 'def'

# array
array = `[1, 2, 3]`
array.size             # => 3

#+END_SRC

In addition, ~true~, ~false~, and ~null~ map to ~true~, ~false~, and ~nil~
respectively. JavaScript that evaluates these values can be used
directly in Opal.

* Manipulating JavaScript objects

Manipulating native JavaScript objects is a little more cumbersome.
Because of how Opal is compiled [fn:CompiledOpal], you cannot access methods and
properties directly.  (This, however, changes in a future version of opal [fn:JS]).
You /can/ do further manipulation via x-strings if needed.

#+BEGIN_SRC ruby
w = `window`
location = `#{w}.location`
href = `#{location}.href`
#+END_SRC


* Native - Making life easier
That's pretty cumbersome. Pretty un-Ruby-like if you ask me. In the
Ruby way of making the developer happy, you can use ~Kernel#Native()~ to
wrap a native object for more convenient access in Opal.

Ruby implements the [[http://en.wikipedia.org/wiki/Uniform_access_principle][*Uniform Access Principle*]]. As such, you can't
access the equivalent of properties on Ruby objects; rather all access is via
methods even if they look like properties (due to parentheses being
optional in Ruby). In JavaScript, the difference between properties and
functions/methods is significant.  So how would you do the different
accesses in Opal if everything is a method?

In a nutshell, what ~Native()~ does is create
a Ruby/Opal object with a ~@native~ instance variable wrapping the native object.  It uses
~method_missing()~ to call native methods on ~@native~, and ~[]~ and ~[]=~ for
reading/setting properties

#+BEGIN_SRC ruby
obj = Native(`returnSomeObj()`) # need x-strings to get a JS object into opal
obj[:property]                  # property reader
obj[:property] = 'new value'    # property writer
obj.method                      # method call without parameters
obj.method2(1, 2)               # method call with parameters
#+END_SRC

To get a feel of accessing a property vs a method/function on a native object, play
w/this  [[http://fkchang.github.io/opal-irb/index-embeddable.html#code:w%2520%253D%2520Native(%2560window%2560)%250Aw.prompt%2520%2520%2520%2523%2520calls%2520method%252C%2520pops%2520up%2520empty%2520prompt%250Aw%255B%253Aprompt%255D%2520%2523%2520give%2520you%2520back%2520the%2520function%2520that%2520is%2520in%2520the%2520property][opal-irb example]] a bit

Let's revisit of href example using ~Native()~:

#+BEGIN_SRC ruby
w = Native(`window`)
location = w.location
href = location.href
#+END_SRC

Much nicer, don't you agree?

It's worth noting that ~Native()~ works where methods will resolve themselves as properties if that's what they are.

#+BEGIN_SRC ruby
w = Native(`window`) # => #<Native:[object Window]>
w[:location]         # property => #<Native:http://fkchang.github.io/opal-irb/index-embeddable.html>
w.location           # => #<Native:http://fkchang.github.io/opal-irb/index-embeddable.html>
#+END_SRC

* Conclusion
Writing wrapper classes is useful in making the interfaces to your Javascript code
more Ruby-like.   Even without wrapper classes, you will find x-strings and ~Native()~ options useful.
These Opal features can bring a lot of joy and productivity to the
client-side Ruby developer. I'll cover wrapping Javascript in Opal
classes in a future issue.

Enjoy!

[fn:CompiledOpal]
As indicated by
http://opalrb.org/docs/compiled_ruby/#ruby-from-javascript, compiled
Opal method names get a ~$~ prepended to them to avoid conflict with
JavaScript methods.  As such running a method on a native object would
compile to that method name prepended with a ~$~, which would not exist on the object.
This [[http://opalrb.org/try/?code:w%2520%253D%2520%2560window%2560%250Aw.location][example]]  ought to make it a bit clearer


[fn:JS] This recently merged [[https://github.com/opal/opal/pull/879][PR]] from [[https://github.com/jeremyevans][Jeremy Evans]] into master
supports a much handier way to access JavaScript functions and
properties than using x-stings.  With a native object, you can use
object.JS to get at the JavaScript.  This functionality will most
likely NOT go into 0.8, but some future version, possibly 0.9. Examples:
#+BEGIN_SRC ruby
o = `returnAnObject()`
# access properties like this
o.JS[:property]
# access functions like this
o.JS.javascriptMethod(1, 2)
#+END_SRC

Let's look at the href example I've been using with this new syntax
#+BEGIN_SRC ruby
w = `window`
location = w.JS[:location]
href = location.JS[:href]
#+END_SRC
