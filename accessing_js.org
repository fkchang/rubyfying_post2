#+OPTIONS: num:nil toc:nil

#+ATTR_HTML: :target "_blank"
So you've decided to take the plunge and try Opal, the 1st question
you might have is, "Do I lose access to all the JavaScript libraries
out there?" The answer is no.  Ideally you'll want Ruby wrappers that
ruby-fy JavaScript in question, it'll make you happier, but that's not
always available.  A great example is of a Ruby-fied wrapper is [[https://github.com/opal/opal-jquery][opal-jquery
]] which goes a long way to making the jQuery interface more Ruby like.


* Calling JavaScript Directly
#+ATTR_HTML: :target "_blank" 
To invoke JavaScript and store the output in Opal, use x-strings,
either via the backtick operator or the %x syntax.  Some documentation
here: http://opalrb.org/docs/compiled_ruby/#javascript-from-ruby

#+BEGIN_SRC ruby
# backticks, good for 1 line
location = `window.location`

# %x for multi line, I often use | as delimeter, esp. for JavaScript
%x|
  var f = new Foo();
  f.bar
|
#+END_SRC

* Interpolation

Just as x-strings in Ruby support interpolation, x-strings in Opal also support
interpolation. This can be quite handy.

#+BEGIN_SRC ruby
 # it should be noted that prompt is already exposed in opal-browser
 `prompt('what have you done since  ' + #{RUBY_RELEASE_DATE})`
#+END_SRC

* Simple return values
So you can now invoke any JavaScript you need to, but what about the
return values?  X-strings return the native types, some of which you
can use and manipulate directly in Opal.

In Opal, 3 types get compiled to the native Javascript types.  These types are
- Strings
- Numeric
- Array

#+ATTR_HTML: :target "_blank"
These types are usuable directly in opal as Ruby objects.  For deeper
understanding, see http://opalrb.org/docs/compiled_ruby/ for more
details on what Opal compiles to.

#+BEGIN_SRC ruby
# numbers
n = `2 + 2`
triple product = n * 3 # => 12

# strings
str = 'abcdef'
str[3..-1]             # => 'def'

# array
array = `[1, 2, 3]`
array.size             # => 3

#+END_SRC

In addition, true, false, and null map to true, false, and nil
respectively. JavaScript that evaluates these values can be used
directly in Opal.

* Manipulating JavaScript objects

Manipulating native JavaScript objects is a little more cumbersome.
Because of how Opal is compiled [fn:CompiledOpal] you cannot access methods and
properties directly.  (This however changes in a future version of opal see here [fn:JS])
You CAN do further manipulation via x-strings if needed.

#+BEGIN_SRC ruby
w = `window`
location = `#{w}.location`
href = `#{location}.href`
#+END_SRC


* Native - Making life easier
That's pretty cumbersome. Pretty un-Ruby-like if you ask me. In the
Ruby way of making the developer happy, you can use Kernel#Native() to
wrap a native object for more convenient access in Opal.

#+ATTR_HTML: :target "_blank"
Ruby implements the [[http://en.wikipedia.org/wiki/Uniform_access_principle][*Uniform Access Principle*]]. As such, you can't
access the equivalent of properties on Ruby objects, all access is via
methods even if they look like properties due to parentheses being
optional in Ruby. In JavaScript, the difference between properties and
functions/methods is significant.  So how would you do the different
accesses in Opal if everything is a method?

What Native() does in a nutshell is wrap the native object by creating
a Ruby/Opal object with a @native instance variable holding the native object.  It uses
method_missing() to call native methods on @native, and [] and []= for
reading/setting properties

#+BEGIN_SRC ruby
obj = Native(`returnSomeObj()`) # need x-strings to get a JS object into opal
obj[:property]                  # property reader
obj[:property] = 'new value'    # property writer
obj.method                      # method call without parameters
obj.method2(1, 2)               # method call with parameters
#+END_SRC

#+ATTR_HTML: :target "_blank" 
To get a feel of accessing a property vs a method/function on a native object, play
around w/this  [[http://fkchang.github.io/opal-irb/index-embeddable.html#code:w%20%3D%20Native(%60window%60)%0Aw.prompt%20%20%20%23%20calls%20method%2C%20pops%20up%20empty%20prompt%0Aw%5B%3Aprompt%5D%20%23%20give%20you%20back%20the%20function%20that%20is%20in%20the%20property][opal-irb example]] a bit

Let's revisit of href example using Native()

#+BEGIN_SRC ruby
w = Native(`window`)
location = w.location
href = location.href
#+END_SRC

Much nicer, don't you agree?

It's worth noting that Native() works where methods will resolve themselves as properties if thats what they are.

#+BEGIN_SRC ruby
w = Native(`window`) # => #<Native:[object Window]>
w[:location]         # property => #<Native:http://fkchang.github.io/opal-irb/index-embeddable.html>
w.location           # => #<Native:http://fkchang.github.io/opal-irb/index-embeddable.html>
#+END_SRC

Using Native(), JavaScript

* Conclusion
Without writing wrapper classes, x-strings and Native() are your
options.  Writing wrapper classes is useful in making the interfaces
more Ruby-like, which can bring a lot of joy and productivity to the
Ruby developer using Opal. I'll cover Wrapping Javascript in Opal
classes in a future issue.

Enjoy!

[fn:CompiledOpal]
#+ATTR_HTML: :target "_blank" 
As indicated by
http://opalrb.org/docs/compiled_ruby/#ruby-from-javascript, compiled
Opal method names get a $ prepended to them to avoid conflict with
JavaScript methods.  As such running a method on a native object would
compile to that method name prepended with a $, which would not exist on the object.
This [[http://opalrb.org/try/?code:w%20%3D%20%60window%60%0Aw.location][example]]  ought to make it a bit clearer  


[fn:JS]
#+ATTR_HTML: :target "_blank"
This recently merged [[https://github.com/opal/opal/pull/879][PR]] from [[https://github.com/jeremyevans][Jeremy Evans]] into master
supports a much handier way to access JavaScript functions and
properties than using x-stings.  With a native object, you can use
object.JS to get at the JavaScript.  This functionality will most
likely NOT go into 0.8, but some future version, possibly 0.9. Examples:
#+BEGIN_SRC ruby
o = `returnAnObject()`
# access properties like this
o.JS[:property]
# access functions like this
o.JS.javascriptMethod(1, 2)
#+END_SRC

Let's look at the href example I've been using with this new syntax
#+BEGIN_SRC ruby
w = `window`
location = w.JS[:location]
href = location.JS[:href]
#+END_SRC
