#+OPTIONS: num:nil toc:nil


#+ATTR_HTML: :target "_blank"
I have discovered that many of the features in [[https://github.com/fkchang/opal-irb/blob/master/README.md][opal-irb]] are unknown to
people I would've expected to have known about those features.  This
post is an attempt to rectify that.

My approach has 3 sections:
- What opal-irb in common with with irb
- How opal-irb differs from irb
- Features unique to opal-irb

* In common with irb

** Terminal emulation (of sorts)
Some people might take this for granted, but irb runs in a terminal,
and thus supports terminal formating among other things. Opal-irb
presently uses a fork of jqconsole, which supports some level of ansi
codes display.  For example, to change the default text to red (like
test runners often do) in opal-irb, you can run the following:

#+BEGIN_SRC ruby
puts "\033[31mRed Text"
#+END_SRC


#+ATTR_HTML: :target "_blank"
You can try this [[http://git.io/vmQVY][directly here]] if the embedded iframe below doesn't look right
#+BEGIN_HTML
<iframe width="100%" height="500" src="http://git.io/vmQVY" frameborder="0" allowfullscreen></iframe>
#+END_HTML

** History up down history
Like irb, opal-irb stores previous statements in a history.  You can
navigate this history with the up/down arrows or use the..

** Gnu readline commands (emacs subset)
A subset of the gnu readline manipulation is supported. I'll likely
add more support over time.  The currently supported bindings are:

#+BEGIN_SRC
Up/Down Arrow and ctrl-p/ctrl-n: Navigate through history
ctrl-a:                          Beginning of line
ctrl-e:                          End of line
ctrl-b:                          Back 1 character
ctrl-f:                          Forward 1 character
ctrl-d:                          Delete 1 character
ctrl-k:                          Kill to the end of the line
alt-b:                           Back 1 word
alt-f:                           Forward 1 word
alt-d:                           Delete 1 word
#+END_SRC

** Autocomplete
A work in progress, (I am presently adding auto complete to the
multi-line editor), auto complete is supported. It follows the same
tab completion model that irb does.  It looks like this:

#+BEGIN_SRC
opal> S<tab>
STDERR          STDIN           STDOUT          ScriptError     Set
SignalException StandardError   StopIteration   String          StringIO
StringScanner   Struct          Symbol          SyntaxError     SystemCallError
SystemExit
opal> ST<tab>
STDERR STDIN  STDOUT
opal> STD

#+END_SRC
** Multi line input
Like irb, you can input multi line input.  You can type on more than
one line until the statement is complete. It indicates an incomplete
line with leading periods:

#+BEGIN_SRC
Welcome to Opal 0.7.1
type help for assistance
opal> class Foo
...   def bar
...     :bar
...     end
...     end
 => "bar"
opal>

#+END_SRC

* Different than irb
** Last value returned
In irb the last value returned is stored in _ variable:

#+BEGIN_SRC
2.2.1 :001 > 2 * 3
 => 6
2.2.1 :002 > puts _
6
 => nil
2.2.1 :003 >
#+END_SRC

In opal-irb, the last value is stored as $_. This departure from irb's
behavior is due to issues I had wrt binding of variables and
visibility from the repl. I may revisit this again to make it match
irb's behavior since I did not intend to change the behavior.

#+BEGIN_SRC
opal> 2 * 3
 => 6
opal> puts $_
6
 => nil
opal>
#+END_SRC

** Help

Help in irb allows you to lookup documentation for methods via ri and rdoc docs.

#+BEGIN_SRC
2.0.0-p247 :001 > help

Enter the method name you want to look up.
You can use tab to autocomplete.
Enter a blank line to exit.

>>
#+END_SRC

Opal-irb's help shows how to operate opal-irb.  The present output is
below. I intend to implement help for method lookup in a different
fashion.

#+BEGIN_SRC
opal> help
help:                            This text
$_                               last value returned is stored in this global
history:                         Shows history
irb_link_for history_num:        Create a link for the code in the history
ctrl-c:                          Abort prompt
ctrl-m:                          Pop up multi-line editor
ctrl-Enter:                      Submit code in multi-line editor
ctrl-l:                          Creates a link with the code you have on the current line/lines

EDITOR FUNCTIONALITY
Up/Down Arrow and ctrl-p/ctrl-n: Navigate through history
ctrl-a:                          Beginning of line
ctrl-e:                          End of line
ctrl-b:                          Back 1 character
ctrl-f:                          Forward 1 character
ctrl-d:                          Delete 1 character
ctrl-k:                          Kill to the end of the line
alt-b:                           Back 1 word
alt-f:                           Forward 1 word
alt-d:                           Delete 1 word
 => nil

#+END_SRC


* Beyond irb

There are number of things that opal-irb does that irb does not:


** "Live gist", create a link w/code
To be able to share the code at the prompt in opal-irb, hit ctl-l (l
for link), and the link will be shown above the line in question.  To
get a link for any other part of the history you can simply navigate
the history and then hit ctl-l on the desired code.

I like to call this feature "Live gist." Like a gist, it's shareable
bit of code. Unlike a gist, it's "live code" -- clicking link puts you
in an environment in which you can play with the code.

This code link can be shared in real app that has opal-irb embedded.
I have already used this in a production codebase to duplicate a bug
condition for a coworker to debug.

The various embedded opal-irb's on this page are all done via "live gist."

** Enhanced History
*** history command like shell
You can type =history= at the prompt get a listing of your history.
You will get numbered listing of the code you've typed in.

#+BEGIN_SRC
opal> history
1: class Foo
  def bar
    :bar
  end
end
2: f = Foo.new
3: f.bar
4: history
 => nil
opal>

#+END_SRC

*** link for history
As an alternate to navigating through history and typing ctrl-l, you
can generate a "live gist" with the =irb_link_for= command, using the
history number shown by the history command.  This behavior differs
from jsbin, jsfiddle, etc. in that you do a bunch of experimentation
and then quickly generate several "live gists" - a behavior that I
think matches repl based experimentation.

#+BEGIN_SRC
irb_link_for <history_num>
#+END_SRC

** Multiline edit
While opal-irb supports multi line input in the same fashion as irb, I
have to confess that I've often made typos with multi ilne input,
which required me to start over since there is no way edit a previous
line.  If you've done this, you know my pain.  You have to hit ctrl-c
to interrupt it and start again.

To address this, I added multiline editor support.  To invoke it, hit
ctl-m (m for multiline editor) and a window will pop up with whatever
code you had on the prompt.  The editor has syntax highlighting, some
level smart indenting and a WIP autocomplete functionality.

The editor can be used with all code in the history.  Simply navigate
back to the desired code in your history and hit ctl-m.

To run the code either hit the run it button, or the ctl-Enter short cut.
To close the window, either hit the close icon, or hit escape.

** Requiring code at run time
One of the purposes for opal-irb is to be able to explore things at
run time.  To help facilitate this there are 2 commands.

*** require_remote
Part of opal-parser, =require_remote= allows you require a remote ruby file.

#+BEGIN_SRC ruby
require_remote <url_to_ruby_file>"
#+END_SRC

As an example, I'll require the raw form of this gist, which prints
out "require_remote is cool" 10 times.

#+BEGIN_HTML
<script src="https://gist.github.com/fkchang/c52173c276976a9ccede.js"></script>
#+END_HTML


#+ATTR_HTML: :target "_blank"
You can try this [[http://git.io/vOmoR][directly here]] if the embedded iframe below doesn't look right
#+BEGIN_HTML
<iframe width="100%" height="500" src="http://git.io/vOmoR" frameborder="0" allowfullscreen></iframe>
#+END_HTML

*** require_js (asynchronous require)
require_js allows you to require javascript with a URL. It is
asynchronous, which when typed in by hand, is usually fine, the file
will get required before your code that uses it gets done.  If not
hand typed, say via live-gist, you'll  need to put some sort of delay.
I've made a raphael based example.
- does a =require_js= of the raphael.js lib
- Adds a reanimate button (via Opal-browser's DOM DSL)
- delays via a =Timeout= and creates an animation and bind reanimation
  code to the reanimate button

#+ATTR_HTML: :target "_blank"
You can try this [[http://git.io/vOm1c][directly here]] if the embedded iframe below doesn't look right
#+BEGIN_HTML
<iframe width="100%" height="500" src="http://git.io/vOm1c" frameborder="0" allowfullscreen></iframe>
#+END_HTML


*** require_js_sync (synchronous require)
Synchronous calls are atypical with javascript api's, chrome says this
is deprecated, so it might be going away in chrome any time.  That
being said, if you are going to script a "live gist" or similar, this
may be more handing than putting in a delay

For an example, I do the same raphael example, but without the delay

#+ATTR_HTML: :target "_blank"
You can try this [[http://git.io/vOmDg][directly here]] if the embedded iframe below doesn't look right
#+BEGIN_HTML
<iframe width="100%" height="500" src="http://git.io/vOmDg" frameborder="0" allowfullscreen></iframe>
#+END_HTML

** Say, say, say, what you want...
On osx, I make lots of use of the built in say command. For example,
have a function that copies over the production database, loads it
into a designated database.  The data is not small and this can take a
while, so the function lets me know what step it's doing. This allows
me to do other work while it's happening.  So even if my terminal
window is obscured, I'll know when the job is done the moment it
happens.

This might be a novelty in the browser, but I decided to implement
that for opal-irb.  I'll likely make it a full fledged gem in the
future.

#+ATTR_HTML: :target "_blank"
You can try this [[http://git.io/vYveZ][directly here]] if the embedded iframe below doesn't
look right.  In either case, type in =say_something= to try it out.
This is only supported by default in reasonably modern webkit
browsers.  Firefox supports speech but it has to be turned on.  You
can check for browser capability [[http://caniuse.com/#feat%3Dspeech-synthesis][here]]

#+BEGIN_HTML
<iframe width="100%" height="500" src="http://git.io/vYveZ" frameborder="0" allowfullscreen></iframe>
#+END_HTML


* Examples
I have several example opal-irb pages referenced from the README on
https://github.com/fkchang/opal-irb. They are:

** Homebrew console example
#+ATTR_HTML: :target "_blank"
http://fkchang.github.io/opal-irb/index-homebrew.html

#+BEGIN_HTML
<iframe width="100%" height="500" src="http://fkchang.github.io/opal-irb/index-homebrew.html" frameborder="0" allowfullscreen></iframe>
#+END_HTML

#+ATTR_HTML: :target "_blank"
This was my 1st attempt, port of a [[https://github.com/larryng/coffeescript-repl][coffescript repl]] with hand written
terminal code.  It's not as full featured as:

** jq-console console example
#+ATTR_HTML: :target "_blank"
http://fkchang.github.io/opal-irb/index-jq.html
#+BEGIN_HTML
<iframe width="100%" height="500" src="http://fkchang.github.io/opal-irb/index-jq.html" frameborder="0" allowfullscreen></iframe>
#+END_HTML

This uses (a fork of) jq-console, for improved console support.  Most
of my development has been on a jq-console based opal-irb, though I
might revisit a port of jq-console because I'd like to remove the
jquery dependency in opal-irb

** Embedded console example
#+ATTR_HTML: :target "_blank"
http://fkchang.github.io/opal-irb/index-embeddable.html
#+BEGIN_HTML
<iframe width="100%" height="700" src="http://fkchang.github.io/opal-irb/index-embeddable.html" frameborder="0" allowfullscreen></iframe>
#+END_HTML

This example is closer to how I see opal-irb being used in real apps -
where opal-irb is embedded with in the app/page itself.  This example
sports some nominal DOM elements that are there to manipulate and a
button to show the irb panel if it's been closed.  Opal-irb supports 2
ways to invoke a hidden opal-irb:
- hot key
- click event on a DOM element

#+ATTR_HTML: :target "_blank"
Both are documented in the [[https://github.com/fkchang/opal-irb/blob/master/README.md][README]]

** Embedded in opal playground
#+ATTR_HTML: :target "_blank"
http://fkchang.github.io/opal-playground/
#+BEGIN_HTML
<iframe width="100%" height="800" src="http://fkchang.github.io/opal-playground/" frameborder="0" allowfullscreen></iframe>
#+END_HTML

Opal-irb has been embedded into my fork of the
opal-playground. Opal-irb is available in the RESULTS section by
hitting the blue "Show Irb" button.  I am hoping to take the
opal-playground direction more towards opal-inspector, but there are
times you want to use a REPL in addition to just editing the code, and
this provides that.

** And much more
#+ATTR_HTML: :target "_blank"
I demo a good number of these opal-irb features at this point in my [[https://www.youtube.com/watch?feature%3Dplayer_detailpage&v%3DGH9FAfKG-qY#t%3D1838][RubyConf 2013
talk "Opal - A New Hope"]] this may be easier to digest than the written word.

#+ATTR_HTML: :target "_blank"
This is just the beginning of much more with regard to in browser opal
tools.  I [[https://www.youtube.com/watch?feature%3Dplayer_detailpage&v%3DGH9FAfKG-qY#t%3D2099][previewed]] a prototype of opal-inspector 2 years back, and I
intend on bringing features previously only supported in smalltalk and
lisp machines for Ruby browser.
